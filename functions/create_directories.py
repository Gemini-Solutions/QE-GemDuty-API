import os

# TODO : is this even getting used anywhere - remove if needed 
def create_java_api_test_structure(base_dir):
    folders = [
        "src/main/java/com/nextgen",  # Main source code
        "src/main/resources",  # Resources (e.g., application.properties)
        "src/test/java/com/nextgen",  # Test source code
        "src/test/resources",  # Test resources (e.g., test data files)
        "src/test/java/utils",  # Utilities like helper classes
        "src/test/java/config",  # Configuration files (e.g., test config)
        "logs",  # Logs directory for test execution
        "reports",  # Reports (e.g., test reports generated by tools)
    ]

    try:
        # Create the folder structure
        for folder in folders:
            folder_path = os.path.join(base_dir, folder)
            os.makedirs(folder_path, exist_ok=True)
            print(f"Created: {folder_path}")

        # Optionally create placeholder Java files
        placeholder_files = {
            "src/test/java/com/nextgen/ApiTest.java": "package tests;\npublic class ApiTest {\n    // Write your test cases here\n}",
            "src/test/resources/application.properties": "# Application configuration properties",
            "logs/.gitkeep": "",  # Placeholder to ensure the logs directory exists
            "reports/.gitkeep": "",  # Placeholder to ensure the reports directory exists
        }

        for file_path, content in placeholder_files.items():
            full_path = os.path.join(base_dir, file_path)
            with open(full_path, "w") as file:
                file.write(content)
            print(f"Created placeholder file: {full_path}")

        # Create Maven POM file with required dependencies
        create_maven_pom_file(base_dir)

        print(f"Java API testing project with Maven structure created successfully.")

    except Exception as e:
        print(f"Error creating folder structure: {e}")


def create_maven_pom_file(base_dir):
    pom_xml_content = """<?xml version="1.0" encoding="UTF-8"?>
        <project xmlns="http://maven.apache.org/POM/4.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>

        <groupId>com.example</groupId>
        <artifactId>api-test</artifactId>
        <version>1.0-SNAPSHOT</version>

        <dependencies>
            <!-- JUnit 5 -->
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-api</artifactId>
                <version>5.7.0</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-engine</artifactId>
                <version>5.7.0</version>
                <scope>test</scope>
            </dependency>

            <!-- RestAssured -->
            <dependency>
                <groupId>io.rest-assured</groupId>
                <artifactId>rest-assured</artifactId>
                <version>4.4.0</version>
                <scope>test</scope>
            </dependency>

            <!-- Jackson for JSON Parsing (Optional) -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>2.12.3</version>
            </dependency>
        </dependencies>

        <build>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.22.2</version>
                    <configuration>
                        <includes>
                            <include>**/*Test.java</include>
                        </includes>
                    </configuration>
                </plugin>
            </plugins>
        </build>
    </project>
"""
    pom_file_path = os.path.join(base_dir, "pom.xml")
    with open(pom_file_path, "w") as file:
        file.write(pom_xml_content)
    print(f"Created: {pom_file_path}")

# TODO : 
# Specify the base directory where the structure should be created
base_directory = "Downloads"
create_java_api_test_structure(base_directory)
